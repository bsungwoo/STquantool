summary(cars)
devtools::install_github('bsungwoo/STquantool',
auth_token = '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', force = T)
shiny::runApp('R')
runApp('R')
colormaps::colormaps
runApp('R')
shiny::runApp('R')
## Installation
```{r}
devtools::install_github('bsungwoo/STquantool',
auth_token = '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', force = T)
log1p(c(1,2))
log1p((c(1,2)))
STquantool::FeaturePlot_mod()
STquantool::FeaturePlot_mod
STquantool::run_app()
data.table::fread
STquantool::run_app()
help("runApp")
STquantool::run_app
??STquantool::run_app
??STquantool::flipModal
STquantool:::run_app
STquantool:::FeaturePlot_mod()
??STquantool::preprocess_data_integ_rpca
??spatial_cluster_plot
colormap::colormap
??FindMarkers
??Seurat::FindMarkers
Seurat::subset
ggplot::ggplot
shiny::runApp('R')
org.Mm.eg.db
help(strsplit)
library(pathwork)
library(patchwork)
facet_wrap
?facet_wrap
help("patchwork")
shiny::runApp('R')
load_files_Modal
?load_files_Modal
testthat::test_dir()
testthat::test_dir('.')
devtools::test()
devtools::use_test()
use_test
?uset_test
?use_test
usethis::use_test()
devtools::use_test()
devtools::use_test()
devtools::test()
usethis::use_mit_license(name = "Sungwoo Bae")
usethis::use_mit_license(copyright_holder = "Sungwoo Bae")
devtools::check()
devtools::document()
devtools::check()
usethis::use_test('app.R')
devtools::check()
read.csv
read.csv()
?read.csv
clusterProfiler::bitr()
?percentData
??percentData
devtools::check()
devtools::check()
purrr:compact
?compact
?write.csv
?write.csv
devtools::check()
?write.table
?wrap_plots
?facet_grid
devtools::check()
devtools::check()
colorRampPalette()
colorRampPalette
?colorRampPalette
grDevices::
grDevices::colorRampPalette
?dev.off
?plot_layout
?position_fill
?position_fill
?facet_wrap
png
?png
devtools::check()
devtools::check()
devtools::check()
Seurat::SpatialColors()
Seurat::SpatialColors
Seurat:::SpatialColors
devtools::check()
?ggridges
runApp('R')
shiny::runApp('R')
devtools::check()
devtools::check()
runApp('R')
devtools::check()
runApp('R')
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
runApp('R')
runApp('R')
runApp('R')
devtools::check()
runApp('R')
runApp('R')
devtools::check()
runApp('R')
reticulate::conda_list()
reticulate::conda_remove("CellDART_t")
runApp('R')
reticulate::conda_install('CellDART_t', ignore_installed=T,
pip = T, "git+https://github.com/mexchy1000/CellDART.git")
reticulate::conda_remove("CellDART_t")
devtools::check()
reticulate::conda_create(envname = 'CellDART_t', python_version = '3.8.12')
reticulate::conda_install('CellDART_t', ignore_installed=T,
pip = T, "git+https://github.com/mexchy1000/CellDART.git")
reticulate::conda_install(conda.env.name, ignore_installed=T,
packages = c("graphviz", "numexpr"), pip=T)
reticulate::conda_install('CellDART_t', ignore_installed=T,
packages = c("graphviz", "numexpr"), pip=T)
reticulate::conda_remove("CellDART_t")
runApp('R')
brain.merge <- readRDS("~/DATA1/Spatial/brain.merge.rds")
brain.merge
brain.merge
brain.merge[['orig.ident']]
factor(brain.merge[['orig.ident']])
levels(brain.merge[['orig.ident']])
levels(factor(brain.merge[['orig.ident']]))
levels(factor(brain.merge[['orig.ident']][,1]))
devtools::check()
runApp('R')
